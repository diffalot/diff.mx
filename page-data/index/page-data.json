{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"allMdx":{"edges":[{"node":{"id":"d4ae32aa-bf49-59c2-a870-1ce15a113b06","excerpt":"UPDATE: i have been confused by multiple uses of CDM { Content Delivery\nManager | Content Decryption Module } on w3c lists. please substitute “CDM”\nwith \"DRM server\" in the notes below. Here are a few quick notes from yesterday's lightning talks at #fcx2013: What to do with EME? How do we leverage the needs of producers as we move toward collective authorship and editing systems with emergent…","fields":{"slug":"/2013/04/eme-has-landed-run-for-your-life/","source":"posts"},"frontmatter":{"date":"2013-04-22T12:00:00.000Z","title":"EME Has Landed, Run for Your Life"},"internal":{"content":"---\nlayout: post\ntitle: 'EME Has Landed, Run for Your Life'\ndate: 2013-04-22 12:00:00\ncategories: [mtos]\ntags: [eme, html5, webrtc]\n---\n\n> UPDATE: i have been confused by multiple uses of CDM { Content Delivery\n> Manager | Content Decryption Module } on w3c lists. please substitute “CDM”\n> with \"DRM server\" in the notes below.\n\nHere are a few quick notes from yesterday's lightning talks at #fcx2013:\n\nWhat to do with EME?\n\nHow do we leverage the needs of producers as we move toward collective authorship and editing systems with emergent properties that negotiate a user’s personal view of a media items.\n\nDo we need new words to talk about this? Probably not, but rather than use the wrong words or words I don’t know (which would be even harder to say), I’m just going to make some words up, and try to explain what they mean.\n\nEmergent Media Systems (Memetics)\n\nalgorithmically edited content\n\nReddit – Everyone’s front page is different, that’s the joke of the site calling itself “the front page of the internet”\n\n(this is just the machinist jargon that describes how we seem to be coding the internet to work for freedom)\n\nWhat’s happening next\n\nRealtime playhead sync across a single user’s browser sessions and among users.\n\nWebSockets are really cool.\n\nOne day we’ll have a globally distributed DHT that works like bittorrent but only in JavaScript over WebSockets data connection\n\nfeatures of this setup:\n\n    central server negotiates “trust” between websocket clients\n    browsers send data to each other\n\nDRM is silly\n\nHixie: “proliferation of plugins” yes, but not exactly–large vendors aren’t making plugins, they’re forking webkit. (meanwhile open web spec writers are adding to FireFox)\n\nSo from my perspective, EME doesn’t belong in the spec, but it’s going to make it into the browsers and the content ecosystem anyway, so what do we do about it to encourage freer communication.\n\nEME relies on a CDM.\n\nThis is the same setup we agree is great and we use a CDM to “authorize” websocket connections,\n\nSo let’s build CDM that protects everything that we protect with creative commons (can anyone track down the actual spec for http://github.com/diffalot/DReaM) and let’s give users playgrounds to see how choosing different licenses affects how their contributions are amplified across the network.\n\nAnd then let’s throw a DHT in the spec.\n\n> This entry was posted on userspace.io (a barely used and therefore abandoned\n> blog) on April 22, 2013. You may view the original on [The WayBack\n> Machine](https://web.archive.org/web/20131026130130/http://userspace.io/2013/eme-has-landed-run-for-your-life/)\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"2b2559b0-f1bb-5912-b502-6b98a39a1207","excerpt":"Git Subtrees allow easily tracking and contributing to remote repositories. The advantage over submodules is that the tracked subdirectory is contained within the current repository repository history so no initialization and update cycle is required when cloning the project. Additionally, the history of the subtree may be fully tracked or squashed. these notes use the following articles as…","fields":{"slug":"/2015/01/git-subtree-ready-reference/","source":"posts"},"frontmatter":{"date":"2015-01-22T12:00:00.000Z","title":"Git Subtree Ready Reference"},"internal":{"content":"---\nlayout: post\ntitle: 'Git Subtree Ready Reference'\ndate: 2015-01-22 12:00:00\ncategories: [development]\ntags: [git, development, git subtree]\n---\n\nGit Subtrees allow easily tracking and contributing to remote repositories. The advantage over submodules is that the tracked subdirectory is contained within the current repository repository history so no initialization and update cycle is required when cloning the project. Additionally, the history of the subtree may be fully tracked or squashed.\n\n> these notes use the following articles as reference:\n>\n> - [Alternatives To Git Submodule: Git Subtree](http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/)\n> - [Managing Nested Libraries Using the GIT Subtree Merge Workflow](http://www.codeproject.com/Articles/562949/ManagingplusNestedplusLibrariesplusUsingplustheplu)\n> - [6.7 Git Tools - Subtree Merging](http://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging)\n> - [Moving A Subdirectory Into A Separate Git Repository](http://airbladesoftware.com/notes/moving-a-subdirectory-into-a-separate-git-repository/)\n\n# track a remote repository, squash commits\n\n1. add subtree as a remote\n\n   `git remote add -f $REMOTE_NAME $REMOTE_URI`\n\n2. setup remote as a subtree with a relative local path. this will fetch and merge.\n\n   `git subtree add --prefix $LOCAL_PATH $REMOTE_NAME $REMOTE_BRANCH --squash`\n\n3. fetch and merge (pull) when the subtree remote has updates\n\n   ```git fetch $REMOTE_NAME $REMOTE_BRANCH\n   git subtree pull --prefix $LOCAL_PATH $REMOTE_NAME $REMOTE_BRANCH\n   ```\n\n# track a subdirectory of a remote repository, keep full history\n\n1. clone remote repository as a new project\n\n   `git clone $REMOTE_URI`\n\n2. discard everything but the subdirectory wanted, this will make the wanted directory the project root with full working history.\n\n   ```cd $CLONED_REPO\n   git checkout -b $WORK_BRANCH\n   git filter-branch --subdirectory-filter $WANTED_DIRECTORY HEAD -- --all\n   git reset --hard\n   git gc --aggressive\n   git prune\n   ```\n\n3. setup new remote to contain project, and push to master branch at that location\n\n   ```git remote add $NEW_REMOTE_NAME $NEW_REMOTE_URI\n   git push --set-upstream $NEW_REMOTE_NAME $WORK_BRANCH:master\n   ```\n\n4. use that new repository as a subtree in either project to commit changes to both repositories. if you'd like the full history in your project, leave off the `--squash` during submodule commands.\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"6db34c74-d6f7-5c89-9888-333f215cf3fc","excerpt":"i'm starting over with blogging. i don't know what i'm going to write about, i\ndon't know how often i'm going to write, but i feel i've reached a place where\ni'm not terrified of stating my opinions on ... things. i'm going to take it slowly. i'm not going to worry about spelling or\npunctuation. i'm not going to worry too much about what i say. (of course\ni'll be avoiding saying mean things, but i…","fields":{"slug":"/2014/10/starting-over-with-blogging/","source":"posts"},"frontmatter":{"date":"2014-10-01T12:00:00.000Z","title":"Starting Over With Blogging"},"internal":{"content":"---\nlayout: post\ntitle: 'Starting Over With Blogging'\ndate: 2014-10-01 12:00:00\ncategories: [diff.mx]\ntags: [blogging, journaling, personal archives]\n---\n\ni'm starting over with blogging. i don't know what i'm going to write about, i\ndon't know how often i'm going to write, but i feel i've reached a place where\ni'm not terrified of stating my opinions on ... things.\n\ni'm going to take it slowly. i'm not going to worry about spelling or\npunctuation. i'm not going to worry too much about what i say. (of course\ni'll be avoiding saying mean things, but i've reached a point where i don't\nmind saying something factually wrong or theoretically idiotic&mdash;i can\nfinally view my lack of perfection as part of the process.)\n\nthings i know my blog needs:\n\n1. tags, categories, and search &mdash; this is my offboard brain, i need to be\n   able to find things in it\n2. compiled list of offsite links &mdash; further handy reference material\n3. **this is a biggie that will be tough to develop** some way to aggregate all\n   the things i favorite across social platforms: my feed reader, twitter,\n   youtube &mdash; i want to be able to search through media that i've liked and\n   quickly access it or share it\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"6f8db5ec-5ce1-58b1-b89a-9d335822a80c","excerpt":"via  pfig's gist","fields":{"slug":"/2015/01/imagemagick-favicon-one-liner/","source":"posts"},"frontmatter":{"date":"2015-01-24T12:00:00.000Z","title":"Imagemagick Favicon One-Liner"},"internal":{"content":"---\nlayout: post\ntitle: 'Imagemagick Favicon One-Liner'\ndate: 2015-01-24 12:00:00\ncategories: [development]\ntags: [imagemagick, favicon]\n---\n\n```bash\nconvert $SOURCE_IMAGE  -bordercolor white -border 0 \\\n      \\( -clone 0 -resize 16x16 \\) \\\n      \\( -clone 0 -resize 32x32 \\) \\\n      \\( -clone 0 -resize 48x48 \\) \\\n      \\( -clone 0 -resize 64x64 \\) \\\n      -delete 0 -alpha off -colors 256 favicon.ico\n```\n\nvia [pfig's gist](https://gist.github.com/pfig/1808188)\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"6a4b16fb-9cea-5ecc-8768-466846d84cda","excerpt":"Privoxy  is an ad removing proxy that disallows your\nweb browser from accessing content located on ad networks for both ad display\nand browser tracking. Normal setup involves changing your web browser's proxy\nsettings to point to privoxy on port 8118, but it can be installed on routers\nlike OpenWRT to transparently block all advertising for all clients connecting\nto the internet through that…","fields":{"slug":"/2015/01/remove-all-advertisements-for-open-wrt-wifi-clients-with-privoxy/","source":"posts"},"frontmatter":{"date":"2015-01-29T12:00:00.000Z","title":"Remove All Advertisements for OpenWRT wifi clients with Privoxy"},"internal":{"content":"---\nlayout: post\ntitle: 'Remove All Advertisements for OpenWRT wifi clients with Privoxy'\ndate: 2015-01-29 12:00:00\ncategories: [administration]\ntags: [openwrt, privoxy, adblock, do not track, advertising]\n---\n\n[Privoxy](http://www.privoxy.org/) is an ad removing proxy that disallows your\nweb browser from accessing content located on ad networks for both ad display\nand browser tracking. Normal setup involves changing your web browser's proxy\nsettings to point to privoxy on port 8118, but it can be installed on routers\nlike OpenWRT to transparently block all advertising for all clients connecting\nto the internet through that router.\n\n> The following setup for OpenWRT only works on HTTP request through port 80,\n> HTTPS requests through port 443 will not be intercepted.\n\n## Install Privoxy on Openwrt\n\n```opkg install privoxy\n\n```\n\n## edit `/etc/privoxy/config`\n\nthe important setting is allowing Privoxy to intercept traffic\n\n```accept-intercepted-requests 1\n\n```\n\nsetting the `lan` ip address of the router as the listening port is optional\n(this allows clients to manually set the proxy in the browser while connected\nthrough your router so that even HTTPS requests are intercepted).\n\n```listen-address $ROUTER_LAN_IP:8118\npermit-access $FIRST_THREE_OCTETS_OF_LAN_IP.0/24\n```\n\n## setup privoxy to start on boot\n\n```/etc/init.d/privoxy enable\n/etc/init.d/privoxy start\n```\n\n## edit `/etc/config/firewall`\n\n```config redirect\n        option src              lan\n        option proto            tcp\n        option src_dport        80\n        option dest_ip          $ROUTER_LAN_IP\n        option dest             lan\n        option dest_port        8118\n```\n\n> References:\n>\n> - [a sourceforge\n>   ticket](http://sourceforge.net/p/ijbswa/support-requests/1576/)\n> - [the openwrt wiki](http://wiki.openwrt.org/doc/howto/proxy.privoxy)\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"c7cd0e26-127b-5ba1-84d9-f7985bd0f182","excerpt":"Here's a quick shell function to convert an image for display in the terminal. It requires imagemagick, and  node  img-cat .","fields":{"slug":"/2015/01/echoing-an-image-to-the-terminal-using-x-terms-256-colors/","source":"posts"},"frontmatter":{"date":"2015-01-31T12:00:00.000Z","title":"Echoing an Image to the Terminal Using xTerm's 256 Colors"},"internal":{"content":"---\nlayout: post\ntitle: \"Echoing an Image to the Terminal Using xTerm's 256 Colors\"\ndate: 2015-01-31 12:00:00\ncategories: [console]\ntags: [xterm, console, imagemagick, node, shell script]\n---\n\n```javascript\nlet var = 'value';\n\nfunction whatever() {\n return null\n}\n```\n\n![terminal picture](/images/terminal-picture.png)\n\nHere's a quick shell function to convert an image for display in the terminal. It requires imagemagick, and [node `img-cat`](https://www.npmjs.com/package/img-cat).\n\n```bash\n# terminal-picture takes an image file as an argument and displays it at\n# terminal width with xterm-256-colors\nfunction terminal-picture {\n\tWIDTH_HEIGHT=`identify $1 | awk '{ print $3 }' | sed -e 's/x/ /g'`\n\tPIC_WIDTH=`echo $WIDTH_HEIGHT | awk '{ print $1 }'`\n\tPIC_HEIGHT=`echo $WIDTH_HEIGHT | awk '{ print $2 }'`\n\tPIC_RATIO=`expr $PIC_WIDTH / $PIC_HEIGHT`\n\tTERM_RATIO=`expr $COLUMNS / $LINES`\n\tif [ \"$TERM_RATIO\" -gt \"$PIC_RATIO\" ];\n\tthen\n\t\tconvert $1 -resize x`expr $LINES - 1` /tmp/terminal-picture.png && img-cat /tmp/terminal-picture.png;\n\telse\n\t\tconvert $1 -resize `expr $COLUMNS / 2 - 2` /tmp/terminal-picture.png && img-cat /tmp/terminal-picture.png;\n\tfi\n}\n```\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"c32990f1-2824-566c-bc61-785c0f3a3b96","excerpt":"A friend who works in outreach for a municipal library system asked me if I\nknew of any methods for checking out and checking in books from their depository\nlibraries. I really didn't know what a depository library was, but once it was\nexplained that it was an unstaffed library where patrons remove and deposit\nbooks without  officially  checking them out, I remembered reading about\n Little Free…","fields":{"slug":"/2015/02/estimated-cost-of-prototype-little-library-checkout-system/","source":"posts"},"frontmatter":{"date":"2015-02-01T12:00:00.000Z","title":"Estimated Cost of Prototype Little Library Checkout System"},"internal":{"content":"---\nlayout: post\ntitle: 'Estimated Cost of Prototype Little Library Checkout System'\ndate: 2015-02-01 12:00:00\ncategories: [hardware, embedded systems]\ntags: [littlelibrary, arduino, nfc, xbee, mesh network]\n---\n\nA friend who works in outreach for a municipal library system asked me if I\nknew of any methods for checking out and checking in books from their depository\nlibraries. I really didn't know what a depository library was, but once it was\nexplained that it was an unstaffed library where patrons remove and deposit\nbooks without _officially_ checking them out, I remembered reading about\n[Little Free Libraries](http://littlefreelibrary.org/), and then spent an\nafternoon piecing together the components I'd buy to equip these libraries with\nNFC readers to catalog checkin and checkout.\n\nNFC is becoming standard on cell phones (it's been on android for a while, and\nI believe it's been included on newer iPhones), so it makes an ideal system for\ndeveloping a cataloging system for Little Libraries because making books\nscanable by both the library catalog device and a patron's cell phone opens up\nsome interesting Little Library patron applications (inter-littlelibrary-loan,\netc.)\n\nThe useful range of NFC is somewhere around 60mm and I think most of these\ncomponents could fit in an enclosure with interior dimensions of 4 Altoid tins\nstacked 2 by 2, so I'm not sure how to attach it to a little library or near a\nlittle library so that it's not scanning books that are still in the Little\nLibrary. Metal libraries may not introduce this issue since the books inside\ncould be shielded if the NFC reader was placed on the exterior in a separate\nbox.\n\nThe most basic setup will require a microcontroller (cpu), an NFC reader, a\nclock module (if the cpu doesn't include one), a micro sd card reader, and a\npower supply, also sticker rfid tags to go in the books.\n\n- stickers:\n  - [$1.50 each](http://www.seeedstudio.com/depot/1356MHz-RFID-book-tag-p-1067.html)\n\n# Most Basic System:\n\n**$60.65-$85.65**\n\n- microcontroller:\n  [$39.00](http://www.seeedstudio.com/depot/Seeeduino-Stalker-v3-p-1882.html)\n  (includes micro sd card reader, real time clock, and charge regulator)\n- nfc reader:\n  - [$21.50](http://www.seeedstudio.com/depot/Grove-NFC-p-1804.html)\n- power supply:\n  - battery: [~$10 to\n    ~$25](http://www.seeedstudio.com/depot/Battery-c-1_3/?terms_id=209)\n  - solar panel: [~$5 to\n    ~$15](http://www.seeedstudio.com/depot/Solar-Panel-c-1_118/?ref=side)\n\nThis most basic system only works by going to each location\nto retrieve checkout/checkin data. An app developed for an NFC enabled cell\nphone can read data from the catalog and also program the rfid stickers (use a\nbarcode scanner or isbn entry to get book info -> program sticker by holding it\nto phone).\n\nAside from going to each location to check inventory (in the case of a large\npublic library system administering many little libraries), another option is\nto use the cell network to track inventory, which adds a monthly cell phone\nbill for each location, but only 2G (edge) would be required, so a monthly plan\nfor [~$12](https://www.sparkfun.com/products/13186). To avoid monthly fees,\nanother option is to use local-to-installation area wireless network, or to\nset up a low speed mesh network with nodes as far apart as 28 miles (closer\nwould be better).\n\n# Networked System\n\nBase of a networked system is the same as the most basic system, it just\nneeds to have a networking card added:\n\n- cell network card: **$54.50**\n  - card: [$48.00](http://www.seeedstudio.com/depot/GPRSbee-rev-4-UFL-p-1777.html?cPath=19_20)\n  - antenna: [$6.50](http://www.seeedstudio.com/depot/GSM9001800-antenna-with-interface-cable-p-555.html?cPath=55_59)\n- wifi network card: [**$39.90**](http://www.seeedstudio.com/depot/Wifi-Bee-v20-p-1637.html)\n- xbee 6-mile mesh network card: **$62.90**\n  - card: [$54.95](https://www.sparkfun.com/products/9099)\n  - antenna: [$7.95](https://www.sparkfun.com/products/9143)\n- xbee 28-mile mesh network card: **$74.90**\n  - card: [$66.95](https://www.sparkfun.com/products/11634)\n  - antenna: [$7.95](https://www.sparkfun.com/products/9143)\n\n## Networked System Totals:\n\ncell: $115.15 to $140.15\n\nwifi: $110.55 to $135.55\n\nmesh: $123.55 to $160.55\n\nRunning a server for the networked clients to connect to for data upload\nshouldn't cost more than $5 per month (you could probably run data services for\nevery little library in the whole country for $20), but note that in the case\nof the mesh network, a library would need to run at least one mesh node to\nbridge the mesh network to the internet (~$100).\n\nOf course, all these components should be stored in a waterproof box, and a\nbacklit 2 line display and/or a series of led lights to provide some user\nprompts and feedback.\n\nI'm going to guess a waterproof case would be $15, a screen would be also be\n$15, and leds would be ~$2 each with water resistant casings.\n\nTo increase battery life a magnetic switch can be installed on the door to only\nturn the lights and interface components on for a few minutes after the door\nhas been opened, the rest of the time the device should be in a low power mode\nwhere not much is happening.\n\nOther things worth recording (especially with network connection):\nhumidity/temperature, water sensor, etc...\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"d2e53132-2544-5194-8fb9-004587254814","excerpt":"For More Info MTOS Library MTOS Reference Application MTOS Library Documentation How it Works You generate a GPG Keypair in your browser You can replicate your keypair to another browser for multiple terminals You share your public key with others Others share their public keys with you You use WebTorrent as a dead drop for encrypted messages You let people know you're seeding messages for them…","fields":{"slug":"/2015/10/mtos-progress-report/","source":"posts"},"frontmatter":{"date":"2015-10-25T14:30:00.000Z","title":"MTOS Progress Report"},"internal":{"content":"---\nlayout: post\ntitle: 'MTOS Progress Report'\ndate: 2015-10-25 14:30:00\ncategories: [MTOS, p2p, JavaScript]\ntags: [MTOS, PGP, PKI, WebTorrent, Secure Scuttlebut, Radical Networks]\n---\n\n# For More Info\n\n- [MTOS Library](https://github.com/m-t-o-s)\n- [MTOS Reference Application](https://mtos.co)\n- [MTOS Library Documentation](http://docs.mtos.co)\n\n# How it Works\n\n1. You generate a GPG Keypair in your browser\n1. You can replicate your keypair to another browser for multiple terminals\n1. You share your public key with others\n1. Others share their public keys with you\n1. You use WebTorrent as a dead drop for encrypted messages\n1. You let people know you're seeding messages for them via a swarm of WebRTC channels\n\n# What it's Made Of\n\n- [Forge](https://github.com/digitalbazaar/forge) - TLS implemented in JavaScript for lots of PKI infrastructure\n- [WebTorrent](https://webtorrent.io/) - BitTorrent between Browsers\n- [Secure Scuttlebut](https://github.com/ssbc/secure-scuttlebutt) - A gossip network for message replication\n- [Friends Swarm](https://github.com/moose-team/friends-swarm) - The implementation of secure scuttlebut actually used\n\n# Infrastructure Servers\n\n- [Signalhub](https://github.com/mafintosh/signalhub)\n- [bittorrent-tracker](https://github.com/feross/bittorrent-tracker)\n\n# Known Vulnerabilities\n\n- Browser storage is not encrypted\n- Peer network can be monitored to detect user graph\n\n# Current Status\n\n- at v0.0.0\n- in the middle of a rewrite of the reference implementation\n- that will require a rewrite of the library\n- it's totally unorganized\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"a8b5bbfa-ab81-5ea8-bf43-ec947cd4f3ca","excerpt":"Rebase the repository to 2 commits Soft Reset the last commit Use the softly reset staging area as an  --amend  commit","fields":{"slug":"/2016/04/squashing-a-git-repository-to-a-single-commit/","source":"posts"},"frontmatter":{"date":"2016-04-10T12:00:00.000Z","title":"Squashing a Git Repository to a Single Commit"},"internal":{"content":"---\nlayout: post\ntitle: 'Squashing a Git Repository to a Single Commit'\ndate: 2016-04-10 12:00:00\ncategories: [development]\ntags: [git, development, git rebase]\n---\n\n1. Rebase the repository to 2 commits\n\n```shell\ngit rebase -i $CHECKSUM_OF_FIRST_COMMIT\n```\n\n2. Soft Reset the last commit\n\n```shell\ngit reset --soft \"HEAD^\"\n```\n\n3. Use the softly reset staging area as an `--amend` commit\n\n```shell\ngit commit --amend -m \"Squashed repo to a single commit\"\n```\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"8b1ce323-02eb-5555-af0e-5fc8afdb424a","excerpt":"For a long time I have wanted to setup a Raspberry Pi to use as a development\nmachine. The first attempts I made a few years ago were not successful using a\nRaspberry Pi B (the machine was barely able to run chromium, much less an  npm watch  command and a web inspector). But these days, a Raspberry Pi 3+ is\nserviceable as a daily use development machine. Another huge consideration for using a…","fields":{"slug":"/2018/10/encrypted-root-partition-on-raspberry-pi-3/","source":"posts"},"frontmatter":{"date":"2018-10-29T12:00:00.000Z","title":"Encrypted Root Partition on Raspberry Pi 3+"},"internal":{"content":"---\nlayout: post\ntitle: 'Encrypted Root Partition on Raspberry Pi 3+'\ndate: 2018-10-29 12:00:00\ncategories: [embeddded systems]\ntags: [embedded systems, raspberry pi]\n---\n\nFor a long time I have wanted to setup a Raspberry Pi to use as a development\nmachine. The first attempts I made a few years ago were not successful using a\nRaspberry Pi B (the machine was barely able to run chromium, much less an `npm watch` command and a web inspector). But these days, a Raspberry Pi 3+ is\nserviceable as a daily use development machine.\n\nAnother huge consideration for using a Raspberry Pi as a \"daily driver\" is that\nthe security of having unencrypted root and boot partitions on an easily removed\nsd card is \"less than acceptable\" since anyone with physical access to the Pi\ncan modify your os and filesystem. Essentially, if the sd card is stolen, an\nattacker will have access to all files on it.\n\nI don't believe the Raspberry Pi is capable of having an encrypted boot\npartition or signed kernel at this point, which does not mitigate against evil\nmaid attacks with kernel modifications, but it is possible to encrypt the root\nfilesystem so that the system is encrypted at rest and if the sd card is lost or\nstolen, your data _should_ be safe.\n\nAnother exciting feature of the Raspberry Pi 3's is that they allow [booting\nfrom\nusb](https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md),\nso one simple way of mitigating the chances of an evil maid attack is to keep a\nusb drive on a keychain, so any attacker will need to get ahold of the usb drive\nto perform an evil maid attack.\n\n**_Please note that the following instructions of encrypting a usb storage\ndevice will not protect from evil maid attacks. If the usb device leaves the\nposession of the owner, it should be considered tainted, and should never be\nused to boot again (though encrypted data in the root partition may still be\nconsidered secure)._**\n\n[eink android]: https://teleread.org/2018/03/25/review-onyx-boox-max-2-13-3-e-ink-android-tablet/\n[eink hdmi]: https://www.indiegogo.com/projects/paperlike-3-a-smart-e-ink-monitor-save-your-eyes#/\n\n# Instructions\n\n_Compiled from the [arch linux arm install instructions] and the [arch linux arm\ncryptsetup instructions]_\n\nTo begin with, the usb drive should be prepared on a running linux installation.\n\n## Figure out the device name using `lsblk`\n\nUse `lsblk` to find the usb drive, and make sure you find the right device; for\nthe following instructions we are using `/dev/sdX`, and I hope that is not an\nactual device on your system.\n\n## Format `/dev/sdX` with fdisk\n\n```\nfdisk /dev/sdX\n```\n\nAt the fdisk prompt, delete old partitions and create a new one:\n\n1. Type `o`. This will clear out any partitions on the drive.\n1. Type `p` to list partitions. There should be no partitions left.\n1. Type `n`, then `p` for primary, `1` for the first partition on the drive,\n   press `ENTER` to accept the default first sector, then type `+512M` for the\n   last sector.\n1. Type `t`, then `c` to set the first partition to type W95 FAT32 (LBA).\n1. Type `n`, then `p` for primary, `2` for the second partition on the drive,\n   and then press `ENTER` twice to accept the default first and last sector.\n1. Write the partition table and exit by typing `w.\n\n## Create the FAT filesystem for the boot volume:\n\n```\nmkfs.vfat /dev/sdX1\n```\n\n## Create the encrypted ext4 filesystem for the root volume\n\n```\ncryptsetup luksFormat /dev/sdX2\n\nWARNING!\n========\nThis will overwrite data on /dev/sdX2 irrevocably.\n\nAre you sure? (Type uppercase yes): YES\nEnter passphrase:\nVerify passphrase:\n```\n\n## Open a decrypted block device\n\n```\ncryptsetup open /dev/sdX2 pi-root\n```\n\n## Create an ext4 filesystem on the encrypted block device\n\n```\nmkfs.ext4 /dev/mapper/pi-root\n```\n\n## Mount the root (`/`) and `/boot` filesystems in `/mnt`\n\n```\nmount /dev/mapper/pi-root /mnt\nmkdir -p /mnt/boot\nmount /dev/sdX1 /mnt/boot\n```\n\n## Download and extract the distribution image over `/mnt`\n\n```\nwget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz\nbsdtar -xpf ArchLinuxARM-rpi-2-latest.tar.gz -C /mnt\nsync\n```\n\n_Despite `bsdtar` complaining about `Failed to set file flags` in `./boot/*`,\nthe operation was successful._\n\n## Chroot into `/mnt` with `qemu`\n\n**_Note: the following steps should be done in the qemu chroot!_**\n\n**_This is a badass way to manage a Pi system; you can just insert the usb into\na host system and boot into it as if you're physically using a Pi_**\n\n```\ncd /mnt\nsystemd-nspawn --bind /usr/bin/qemu-arm-static -b -D /mnt\n\n# exit when finished with 'poweroff'\n```\n\n### Administer system\n\n#### Update `/etc/resolv.conf`\n\n```\nrm /etc/resolv.conf\necho \"nameserver 8.8.8.8\" > /etc/resolv.conf ## Not sure about this one, it worked for me\n```\n\n#### Update arch\n\n```\npacman-key --init\npacman-key --populate archlinuxarm\npacman -Suy\n```\n\n#### Add encrypted root dependencies\n\n```\npacman -S lvm2 cryptsetup\n```\n\n#### Setup kernel for mkinitcpio to use encrypted lvm2\n\n##### Add `lvm2` and `encrypt` to `HOOKS` in `/etc/mkinitcpio.conf`\n\n```\nHOOKS=\"base udev autodetect modconf block lvm2 encrypt filesystems keyboard fsck\"\n```\n\n##### Generate a new kernel\n\n```\npacman -S linux\n```\n\n#### setup Pi `/boot/cmdline.txt` to use the encrypted device\n\nAdd: `root=/dev/mapper/usb-drive cryptdevice=/dev/sda2:usb-drive rootfstype=ext4` to the command\n\n#### Setup `/etc/fstab` to point to the usb drive instead of the sd card\n\n```\n# <file system> <dir> <type> <options> <dump> <pass>\n/dev/sda1  /boot   vfat    defaults        0       0\n```\n\n### Poweroff the chroot and unmount the SD card\n\n```\npoweroff\numount /mnt/boot\numount /mnt\nsync\n```\n\n[arch linux arm install instructions]: https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3\n[arch linux arm cryptsetup instructions]: https://wiki.polaire.nl/doku.php?id=archlinux-raspberry-encrypted#raspberry_pi_3_-_arch_linux_encrypted_root_fs\n\n## Boot the Raspberry Pi\n\nRemove the sd card from the raspberry pi, plug in the usb drive and a usb\nkeyboard, and power it on.\n","description":null,"ignoreType":null,"mediaType":null}}},{"node":{"id":"11f8f3f3-1dbd-583e-8ee1-849b30c372a2","excerpt":"I really need to get to work on that WebTorrent video player ;) I've recently moved my blog from Jekyll to Gatsby/MDX because I wanted to have the blog dev environment match my daily dev environment, and the possibility of creating React Components that can enhance my writing while also being able to create \"Pages\" using React for one off experiments is really exciting.  I think making it easier…","fields":{"slug":"/2020/12/developing-an-aside-component-with-mdx/","source":"posts"},"frontmatter":{"date":"2020-12-27T12:00:00.000Z","title":"Developing an Aside Component With MDX"},"internal":{"content":"---\ntitle: 'Developing an Aside Component With MDX'\ndate: 2020-12-27 12:00:00\ncategories: [React]\ntags: [mdx, react, gatsby, tailwindcss]\n---\n\n<Aside>\n\nI really need to get to work on that WebTorrent video player ;)\n</Aside>\n\nI've recently moved my blog from Jekyll to Gatsby/MDX because I wanted to have the blog dev environment match my daily dev environment, and the possibility of creating React Components that can enhance my writing while also being able to create \"Pages\" using React for one off experiments is really exciting.  I think making it easier to maintain the blog will encourage me to use it more often.\n\nNow, I know I could just use an `<aside>` html element (and this React component _does use_ an aside element to be as semantically correct as possible) and then style the element across the site, but I really want to _spend more time with React on a daily basis and gain more experience with TailwindCSS_, which I am finding to be a wonderful css framework.\n\n## Usage\n\nHere's an example of the `<Aside />` I'm building, while the blog is in develop mode.\n\n```markdown\n<Aside>\n\n# Example\n\nwith paragraphs and such,\n\nAll those little son of a guns. Let's build an almighty mountain. Maybe there's a little something happening right here. If what you're doing doesn't make you happy - you're doing the wrong thing. If you don't like it - change it. It's your world. And I know you're saying, 'Oh Bob, you've done it this time.' And you may be right.\n</Aside>\n\nand then you continue to use markdown and the aside will align with this paragraph.\n\nSensors indicate human life forms 30 meters below the planet's surface. Stellar flares are increasing in magnitude and frequency. Set course for Rhomboid Dronegar 006, warp seven. There's no evidence of an advanced communication network. Total guidance system failure, with less than 24 hours' reserve power. Shield effectiveness has been reduced 12 percent. We have covered the area in a spherical pattern which a ship without warp drive could cross in the given time.\n```\n\n<Aside>\n\n# Example\n\nwith paragraphs and such,\n\nAll those little son of a guns. Let's build an almighty mountain. Maybe there's a little something happening right here. If what you're doing doesn't make you happy - you're doing the wrong thing. If you don't like it - change it. It's your world. And I know you're saying, 'Oh Bob, you've done it this time.' And you may be right.\n</Aside>\n\nand then you continue to use markdown and the aside will align with this paragraph.\n\nSensors indicate human life forms 30 meters below the planet's surface. Stellar flares are increasing in magnitude and frequency. Set course for Rhomboid Dronegar 006, warp seven. There's no evidence of an advanced communication network. Total guidance system failure, with less than 24 hours' reserve power. Shield effectiveness has been reduced 12 percent. We have covered the area in a spherical pattern which a ship without warp drive could cross in the given time.\n\n## So lets look at the component source\n\nFrom the above code examples you can see that we just get to include an `<Aside />` wherever we want to in our markdown blog post or page because we have imported the `shortcodes` for our MDX rendering.  Yes, the Aside shortcode includes all the shortcodes we include in our main Post rendering and in our specific Aside shortcode that we are using in the Posts.\n\n```jsx\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { MDXProvider } from '@mdx-js/react'\n\n// Provide common components here\nimport shortcodes from './'\n\n/*\n * The Aside is not fully rendered markdown since it will be passed in during\n * Post.jsx creation. for this reason it receives MDX renderable children which\n * we pass into the MDXProvider\n */\nconst Aside = ({ children }) => {\n  return (\n    <aside className=\"float-right w-2/5 m-2 p-2 text-xs bg-green-100\">\n      <MDXProvider components={shortcodes}>{children}</MDXProvider>\n    </aside>\n  )\n}\n\nAside.propTypes = {\n  children: PropTypes.element\n}\n\nexport default Aside\n```\n\nTo reiterate: in our `Post.jsx` component, we include the Aside component in the shorcodes, and we do the same in our individual `Aside.jsx` component.\n\nIn this way, we have a handy object full of shortcodes we can use in any Posts.\n\n[Check out the source on GitHub here.](https://github.com/diffalot/diff.mx/blob/master/src/components/mdx-shortcodes/Aside.jsx)\n\nI'll be polishing this up as I continue learning tailwind, gatsby, react and mdx.\n","description":null,"ignoreType":null,"mediaType":null}}}],"nodes":[{"id":"d4ae32aa-bf49-59c2-a870-1ce15a113b06"},{"id":"2b2559b0-f1bb-5912-b502-6b98a39a1207"},{"id":"6db34c74-d6f7-5c89-9888-333f215cf3fc"},{"id":"6f8db5ec-5ce1-58b1-b89a-9d335822a80c"},{"id":"6a4b16fb-9cea-5ecc-8768-466846d84cda"},{"id":"c7cd0e26-127b-5ba1-84d9-f7985bd0f182"},{"id":"c32990f1-2824-566c-bc61-785c0f3a3b96"},{"id":"d2e53132-2544-5194-8fb9-004587254814"},{"id":"a8b5bbfa-ab81-5ea8-bf43-ec947cd4f3ca"},{"id":"8b1ce323-02eb-5555-af0e-5fc8afdb424a"},{"id":"11f8f3f3-1dbd-583e-8ee1-849b30c372a2"}]}},"pageContext":{}},"staticQueryHashes":["267843117","3128451518","3128451518"]}